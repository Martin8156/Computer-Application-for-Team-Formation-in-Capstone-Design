Tips For First Things
- Split into different groups with different responsibilities
	- Try and create seperate parts and what those all entail
- Check in documentation and keep up a way for future addition

Large projects work best with Agile
- Break down a larger problem into smaller goals that can be completed in sprints
	- This helps with creating better time estimates for different parts of the project 
- Try and see what parts are required for each other and create a plan for that

Right now, we have a problem with getting the Risk Reduction activities done this semester
	- Try and create a list of goals that we can show that we are making progress

Make sure to deliver the smallest possible thing you can
- The main goal is to create an architecture and a framework we can build off 

Make sure to save all documents for project and explain it in a README file

Really useful to update the README with just any major changes (Basically a commit history)

Dr. Moliski teaches Buisness Information System Management but mainly focused on CS

**Review of Beginning of the Meeting**
Java good, biggest thing is just being comfortable with the language, so as long as we’re all on board with each other
database recommendations for scholarly articles
Google scholar
Ten year old algorithm not going to be useful
Shop floor planning software, good to look at for possible analogies to this problem
Read about what the difficulties were that they encountered
We could start building frontend now (risk reduction activities?)
Want to be thinking about what architecture will be easiest for others to pick up on
This will likely live 5 years, could live longer
Using react should be good given that all software engineering majors run into react when they go through UT
Using GitHub (source code control), being on top of react is good for risk reduction
Check it all into GitHub, including articles
Break into Sprints (Agile?) Big projects with waterfall run late, Agile probably good
Scrum optional, probably added inconvenience
Break up our project into little pieces, if we don’t we’ll probably dramatically underestimate how long stuff will take
Once it’s broken down, we can’t spend forever on each particular topic
Layout a general timeline for when we think we can get each item done
Do Agile
Smallest useful thing we can -> client having a frontend in front of them goes a long long way and helps them to articulate what it is they want
Simple allocation algorithm, measure goodness of fit, read in data, output data, doesn’t have to work well, but if it works that’s great
Assemble history of major changes/commits into the README file